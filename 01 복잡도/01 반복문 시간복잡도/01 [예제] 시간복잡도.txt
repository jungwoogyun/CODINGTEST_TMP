----------------------------------------------
Ω(n)
----------------------------------------------
void func1(int n){
	for(int i=1;i<=n;i++)
		printf("HELLO\n");
}


----------------------------------------------
Ω(n) 
----------------------------------------------

void func1(int n){
	for(int i=1;i<=n;i++)
		printf("HELLO\n");
	for(int i=1;i<=2*n;i++)
		printf("HELLO\n");
	for(int i=1;i<=3*n;i++)
		printf("HELLO\n");
}

-> n+2n+3n
-> 6n
-> n
----------------------------------------------
Ω(n*n)
----------------------------------------------
void func1(int n){
	for(int i=1;i<=n;i++)
		for(int j=1;j<=n;j++)
			print("HELLO\n");
}

----------------------------------------------
Ω(n^2)
----------------------------------------------
void func1(int n){
	for(int i=1;i<=1000000 * n;i++)
		printf("HELLO\n");

	for(int i=1;i<=n;i++)
		for(int j=1;j<=2*n;j++)
			print("HELLO\n");
}

-> 1000000n + n*2*n
-> 1000000n + 2n^2
-> n^2


----------------------------------------------
Ω(log_2n)
----------------------------------------------
void func1(int n){
	for(int i=1; i<=n ;i*=2)
		printf("HELLO\n");
	for(int i=n; i>=1 ;i/=2)
		printf("HELLO\n");
}
-> log_2 n + log_2 n
-> log_2 (n*n)
-> log_2 2^n
-> 2log_2 n
-> log_2n

----------------------------------------------
Ω(nlog_2n)
----------------------------------------------
void func1(int n){
	for(int i=1; i<=n ;i++)
		for(int j=1; j<=m ;j*=2)
			printf("HELLO\n");
}
->nlog_2n


----------------------------------------------
Ω(n + log_2m)
----------------------------------------------
void func1(int n,int m){
	for(int i=1;i<=n;i++)
		printf("HELLO\n");

	for(int i=1;i<=n;i*=2)
		for(int j=n;j>=1;j/=2)
			printf("HELLO\n");

	for(int i=1;i<=m;i*=2)
		for(int j=m;j>=1;j/=2)
			printf("HELLO\n");
	
	for(int i=1;i<=1000000;i++)
		printf("HELLO\n");
}

-> n + (log_2n)^2 + (log_2m)^2 + 1000000
-> n +  2log_2n + 2log_2m + 1000000
-> n + log_2m








